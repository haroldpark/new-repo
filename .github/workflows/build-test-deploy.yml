name: CI/CD - Build, Test, and Deploy React Application

# What's possible?
# 1. CI/CD - Build, Test, and Deploy
# 2. Github automation - Auto-labeling, PR checks/workflows, release management
# 3. Notifications - Discord/slack/telegram/email/sms/push notifications
# 4. Others - compress images, manage artifacts, conditional steps (only if certain files are changed),
# manual approvals (pause workflows and require human confirmation)

#Code Quality & Security

# Automated code formatting (Prettier, Black, gofmt) with auto-commits
# Security vulnerability scanning (CodeQL, Snyk, dependency audits)
# License compliance checking
# Code coverage reporting with trend tracking
# Static analysis and linting enforcement

# Documentation & Communication

# Auto-generate and update documentation from code comments
# Create changelog entries from commit messages or PR labels
# Update README badges automatically
# Generate API documentation and deploy to GitHub Pages
# Comment on PRs with build results, coverage changes, or performance metrics

# Environment & Infrastructure Management

# Spin up/tear down preview environments for each PR
# Database migrations and rollbacks
# Infrastructure as Code deployments (Terraform, CloudFormation)
# Multi-environment promotion workflows (dev → staging → prod)
# Automatic scaling based on usage patterns

# Advanced Automation

# Dependency updates with automated testing (Dependabot + custom workflows)
# Performance benchmarking and regression detection
# Cross-repository workflows (update multiple repos simultaneously)
# Scheduled maintenance tasks (cleanup old branches, archive issues)
# Auto-merge PRs that pass all checks (great for dependency updates)

# Quality Gates & Compliance

# Require specific reviewers based on changed files
# Enforce commit message conventions
# Block deployments during maintenance windows
# Audit logging for compliance requirements

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x] # Test multiple Node versions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage --watchAll=false

      - name: Build application
        run: npm run build

      # Only upload artifacts from one Node version to avoid duplicates
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1 # Clean up artifacts quickly

      # - name: Upload test coverage
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage-report
      #     path: coverage/
      #     retention-days: 7

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

        # Deploy to Vercel
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./

      # Alternative deployment options (uncomment as needed):

      # Deploy to Netlify
      # - name: Deploy to Netlify
      #   uses: nwtgck/actions-netlify@v3.0
      #   with:
      #     publish-dir: './dist'
      #     production-branch: main
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     deploy-message: "Deploy from GitHub Actions"
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      # Deploy to AWS S3
      # - name: Deploy to S3
      #   uses: jakejarvis/s3-sync-action@master
      #   with:
      #     args: --delete
      #   env:
      #     AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     SOURCE_DIR: 'dist'
