# 🎯 Core Features:
# Multi-Framework Support:

# Jest (most common)
# Vitest (modern alternative)
# Mocha + NYC (traditional setup)
# Automatically detects which framework you're using

# Rich Coverage Data:

# Lines, statements, functions, and branches coverage
# Detailed JSON reports with timestamps
# Historical trend tracking (last 100 builds)

# 📊 Trend Tracking:
# Historical Data:

# Stores coverage data in coverage-trends/trend-data.json
# Tracks coverage over time with timestamps and commit info
# Maintains last 100 entries to prevent file bloat

# Visual Trends:

# Optional chart generation showing 30-day coverage trends
# Line and branch coverage visualization
# PNG chart uploaded as artifact

# 🔍 PR Integration:
# Smart Comparisons:

# Compares PR coverage against main branch baseline
# Shows exact percentage differences (+/-)
# Color-coded status indicators (🟢🟡🟠🔴)

# Detailed Comments:

# Updates existing comments instead of creating duplicates
# Shows coverage breakdown by metric
# Includes links to detailed reports

# 🎨 Visual Enhancements:
# Coverage Badges:

# Auto-generates shield.io compatible JSON
# Color-coded based on coverage thresholds:

# 🟢 ≥90% (Excellent)
# 🟡 80-89% (Good)
# 🟠 70-79% (Fair)
# 🔴 <70% (Needs Improvement)

# 🔗 External Integrations:
# Codecov integration
# Coveralls integration
# Both run simultaneously for redundancy

name: Code Coverage & Trend Tracking

on:
  push:
    branches: [main, develop, harold]
  pull_request:
    branches: [main, develop, harold]
  schedule:
    # Generate daily coverage reports at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_baseline:
        description: 'Force update coverage baseline'
        required: false
        type: boolean
        default: false

jobs:
  coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for trend tracking

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Run tests with coverage
      - name: Run tests with coverage
        run: |
          # Use different coverage commands based on test framework
          if grep -q '"jest"' package.json; then
            npm test -- --coverage --coverageReporters=lcov --coverageReporters=json --coverageReporters=text
          elif grep -q '"vitest"' package.json; then
            npm test -- --coverage --reporter=lcov --reporter=json --reporter=text
          elif grep -q '"mocha"' package.json && grep -q '"nyc"' package.json; then
            npm run coverage || nyc npm test
          else
            # Default Jest-style command
            npm test -- --coverage --coverageReporters=lcov --coverageReporters=json --coverageReporters=text
          fi

      # Parse coverage data
      - name: Parse coverage data
        id: coverage
        run: |
          # Create coverage directory if it doesn't exist
          mkdir -p coverage-data

          # Parse coverage from different possible locations
          COVERAGE_FILE=""
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE_FILE="coverage/coverage-summary.json"
          elif [ -f coverage-summary.json ]; then
            COVERAGE_FILE="coverage-summary.json"
          fi

          if [ -n "$COVERAGE_FILE" ]; then
            # Extract coverage percentages using Node.js
            node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('$COVERAGE_FILE', 'utf8'));
              const total = coverage.total;
              
              console.log('lines=' + total.lines.pct);
              console.log('statements=' + total.statements.pct);
              console.log('functions=' + total.functions.pct);
              console.log('branches=' + total.branches.pct);
              
              // Save detailed data
              const timestamp = new Date().toISOString();
              const detailedData = {
                timestamp,
                commit: process.env.GITHUB_SHA,
                branch: process.env.GITHUB_REF_NAME,
                lines: total.lines,
                statements: total.statements,
                functions: total.functions,
                branches: total.branches,
                overall: Math.round((total.lines.pct + total.statements.pct + total.functions.pct + total.branches.pct) / 4 * 100) / 100
              };
              
              fs.writeFileSync('coverage-data/current.json', JSON.stringify(detailedData, null, 2));
            " >> $GITHUB_OUTPUT
          else
            echo "❌ No coverage data found!"
            echo "lines=0" >> $GITHUB_OUTPUT
            echo "statements=0" >> $GITHUB_OUTPUT  
            echo "functions=0" >> $GITHUB_OUTPUT
            echo "branches=0" >> $GITHUB_OUTPUT
          fi

      # Get baseline coverage from main branch
      - name: Get baseline coverage
        id: baseline
        if: github.event_name == 'pull_request'
        run: |
          # Try to get coverage data from main branch
          git fetch origin main:main 2>/dev/null || true

          # Check if we have historical data
          if git show main:coverage-data/current.json > baseline-coverage.json 2>/dev/null; then
            echo "📊 Found baseline coverage data"
            
            node -e "
              const fs = require('fs');
              const baseline = JSON.parse(fs.readFileSync('baseline-coverage.json', 'utf8'));
              
              console.log('baseline_lines=' + baseline.lines.pct);
              console.log('baseline_statements=' + baseline.statements.pct);
              console.log('baseline_functions=' + baseline.functions.pct);
              console.log('baseline_branches=' + baseline.branches.pct);
              console.log('baseline_overall=' + baseline.overall);
            " >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No baseline coverage found"
            echo "baseline_lines=0" >> $GITHUB_OUTPUT
            echo "baseline_statements=0" >> $GITHUB_OUTPUT
            echo "baseline_functions=0" >> $GITHUB_OUTPUT
            echo "baseline_branches=0" >> $GITHUB_OUTPUT
            echo "baseline_overall=0" >> $GITHUB_OUTPUT
          fi

      # Generate coverage trend data
      - name: Update coverage trends
        if: github.ref == 'refs/heads/main' || github.event.inputs.force_baseline == 'true'
        run: |
          # Create trends directory
          mkdir -p coverage-trends

          # Load current data
          if [ -f coverage-data/current.json ]; then
            CURRENT_DATA=$(cat coverage-data/current.json)
            
            # Create or update trend file
            TREND_FILE="coverage-trends/trend-data.json"
            
            if [ -f "$TREND_FILE" ]; then
              # Append to existing trend data
              node -e "
                const fs = require('fs');
                const current = JSON.parse(fs.readFileSync('coverage-data/current.json', 'utf8'));
                const trends = JSON.parse(fs.readFileSync('$TREND_FILE', 'utf8'));
                
                // Keep only last 100 entries to avoid file getting too large
                trends.history = trends.history.slice(-99);
                trends.history.push(current);
                trends.lastUpdated = current.timestamp;
                
                fs.writeFileSync('$TREND_FILE', JSON.stringify(trends, null, 2));
              "
            else
              # Create new trend file
              node -e "
                const fs = require('fs');
                const current = JSON.parse(fs.readFileSync('coverage-data/current.json', 'utf8'));
                
                const trends = {
                  lastUpdated: current.timestamp,
                  history: [current]
                };
                
                fs.writeFileSync('$TREND_FILE', JSON.stringify(trends, null, 2));
              "
            fi
            
            echo "📈 Updated coverage trends"
          fi

      # Generate coverage badge data
      - name: Generate coverage badge
        run: |
          mkdir -p .github/badges

          LINES_PCT="${{ steps.coverage.outputs.lines }}"

          # Determine badge color based on coverage
          if (( $(echo "$LINES_PCT >= 90" | bc -l) )); then
            COLOR="brightgreen"
            EMOJI="🟢"
          elif (( $(echo "$LINES_PCT >= 80" | bc -l) )); then
            COLOR="green"
            EMOJI="🟡"
          elif (( $(echo "$LINES_PCT >= 70" | bc -l) )); then
            COLOR="yellow"  
            EMOJI="🟠"
          elif (( $(echo "$LINES_PCT >= 60" | bc -l) )); then
            COLOR="orange"
            EMOJI="🔴"
          else
            COLOR="red"
            EMOJI="🔴"
          fi

          # Create badge JSON
          cat > .github/badges/coverage.json << EOF
          {
            "schemaVersion": 1,
            "label": "coverage",
            "message": "${LINES_PCT}%",
            "color": "$COLOR"
          }
          EOF

          echo "BADGE_COLOR=$COLOR" >> $GITHUB_ENV
          echo "BADGE_EMOJI=$EMOJI" >> $GITHUB_ENV

      # Upload coverage reports
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     file: ./coverage/lcov.info
      #     flags: unittests
      #     name: codecov-umbrella
      #     fail_ci_if_error: false
      #     token: ${{ secrets.CODECOV_TOKEN }}

      # Alternative: Upload to Coveralls
      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage/lcov.info

      # Create coverage report artifacts
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
            coverage-data/
            coverage-trends/
            .github/badges/
          retention-days: 30

      # Generate detailed coverage report
      - name: Generate coverage report
        id: report
        run: |
          # Create detailed HTML report summary
          cat > coverage-summary.md << 'EOF'
          # 📊 Coverage Report

          ## Current Coverage
          | Metric | Percentage | Status |
          |--------|------------|---------|
          | Lines | ${{ steps.coverage.outputs.lines }}% | ${{ env.BADGE_EMOJI }} |
          | Statements | ${{ steps.coverage.outputs.statements }}% | ${{ env.BADGE_EMOJI }} |
          | Functions | ${{ steps.coverage.outputs.functions }}% | ${{ env.BADGE_EMOJI }} |
          | Branches | ${{ steps.coverage.outputs.branches }}% | ${{ env.BADGE_EMOJI }} |

          ## Coverage Standards
          - 🟢 Excellent: ≥90%
          - 🟡 Good: 80-89%
          - 🟠 Fair: 70-79%
          - 🔴 Needs Improvement: <70%

          EOF

          # Add comparison for PRs
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CURRENT_LINES="${{ steps.coverage.outputs.lines }}"
            BASELINE_LINES="${{ steps.baseline.outputs.baseline_lines }}"
            
            if [ "$BASELINE_LINES" != "0" ]; then
              DIFF=$(node -e "console.log(($CURRENT_LINES - $BASELINE_LINES).toFixed(2))")
              
              if (( $(echo "$DIFF > 0" | bc -l) )); then
                TREND="📈 ⬆️ +${DIFF}%"
                TREND_EMOJI="🎉"
              elif (( $(echo "$DIFF < 0" | bc -l) )); then
                TREND="📉 ⬇️ ${DIFF}%"
                TREND_EMOJI="⚠️"
              else
                TREND="➡️ No change"
                TREND_EMOJI="✅"
              fi
              
              cat >> coverage-summary.md << EOF
          ## Coverage Change
          $TREND_EMOJI **$TREND** compared to main branch

          | Metric | Current | Baseline | Change |
          |--------|---------|----------|---------|
          | Lines | ${{ steps.coverage.outputs.lines }}% | ${{ steps.baseline.outputs.baseline_lines }}% | $DIFF% |
          | Statements | ${{ steps.coverage.outputs.statements }}% | ${{ steps.baseline.outputs.baseline_statements }}% | $(node -e "console.log((${{ steps.coverage.outputs.statements }} - ${{ steps.baseline.outputs.baseline_statements }}).toFixed(2))")% |
          | Functions | ${{ steps.coverage.outputs.functions }}% | ${{ steps.baseline.outputs.baseline_functions }}% | $(node -e "console.log((${{ steps.coverage.outputs.functions }} - ${{ steps.baseline.outputs.baseline_functions }}).toFixed(2))")% |
          | Branches | ${{ steps.coverage.outputs.branches }}% | ${{ steps.baseline.outputs.baseline_branches }}% | $(node -e "console.log((${{ steps.coverage.outputs.branches }} - ${{ steps.baseline.outputs.baseline_branches }}).toFixed(2))")% |

          EOF
            fi
          fi

      # Comment on PR with coverage results
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverageSummary = fs.readFileSync('coverage-summary.md', 'utf8');

            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment => 
              comment.body.includes('📊 Coverage Report')
            );

            const fullComment = `${coverageSummary}

            ---
            <details>
            <summary>📋 Coverage Details</summary>

            - **Commit**: \`${context.sha.substring(0, 7)}\`
            - **Generated**: ${new Date().toLocaleString()}
            - **View full report**: Check the coverage artifacts in this workflow run

            </details>`;

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: fullComment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: fullComment
              });
            }

      # Commit updated coverage data to repository
      - name: Commit coverage data
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add coverage-data/ coverage-trends/ .github/badges/ 2>/dev/null || true

          if git diff --staged --quiet; then
            echo "No coverage data changes to commit"
          else
            git commit -m "📊 Update coverage data and trends
            
            Coverage: ${{ steps.coverage.outputs.lines }}% lines
            Generated: $(date)
            Commit: ${{ github.sha }}"
            
            git push
          fi

      # Set job summary
      - name: Set job summary
        run: |
          cat coverage-summary.md >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Coverage Artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [HTML Coverage Report](./coverage/lcov-report/index.html)" >> $GITHUB_STEP_SUMMARY

  # Generate coverage trend visualization (optional advanced feature)
  generate-trends:
    needs: coverage
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Generate trend chart
        run: |
          # Install chart generation dependencies
          npm install --no-save chart.js chartjs-node-canvas

          # Create trend visualization script
          cat > generate-chart.js << 'EOF'
          const fs = require('fs');
          const { ChartJSNodeCanvas } = require('chartjs-node-canvas');

          if (fs.existsSync('coverage-trends/trend-data.json')) {
            const trendData = JSON.parse(fs.readFileSync('coverage-trends/trend-data.json', 'utf8'));
            
            const width = 800;
            const height = 400;
            const chartJSNodeCanvas = new ChartJSNodeCanvas({ width, height });
            
            const configuration = {
              type: 'line',
              data: {
                labels: trendData.history.slice(-30).map(entry => 
                  new Date(entry.timestamp).toLocaleDateString()
                ),
                datasets: [{
                  label: 'Line Coverage %',
                  data: trendData.history.slice(-30).map(entry => entry.lines.pct),
                  borderColor: 'rgb(75, 192, 192)',
                  tension: 0.1
                }, {
                  label: 'Branch Coverage %', 
                  data: trendData.history.slice(-30).map(entry => entry.branches.pct),
                  borderColor: 'rgb(255, 99, 132)',
                  tension: 0.1
                }]
              },
              options: {
                responsive: true,
                plugins: {
                  title: {
                    display: true,
                    text: 'Coverage Trend (Last 30 Days)'
                  }
                },
                scales: {
                  y: {
                    beginAtZero: true,
                    max: 100
                  }
                }
              }
            };
            
            chartJSNodeCanvas.renderToBufferSync(configuration)
              .then(buffer => {
                fs.writeFileSync('coverage-trend-chart.png', buffer);
                console.log('📈 Coverage trend chart generated');
              });
          }
          EOF

          node generate-chart.js || echo "Chart generation failed"

      - name: Upload trend chart
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-trend-chart
          path: coverage-trend-chart.png
          retention-days: 30
